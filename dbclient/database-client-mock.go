// Code generated by MockGen. DO NOT EDIT.
// Source: dbclient/database-client.go

// Package dbclient is a generated GoMock package.
package dbclient

import (
	gomock "github.com/golang/mock/gomock"
	models "patelmaulik.com/maulik/v1/models"
	reflect "reflect"
)

// MockIDatabaseRepository is a mock of IDatabaseRepository interface
type MockIDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseRepositoryMockRecorder
}

// MockIDatabaseRepositoryMockRecorder is the mock recorder for MockIDatabaseRepository
type MockIDatabaseRepositoryMockRecorder struct {
	mock *MockIDatabaseRepository
}

// NewMockIDatabaseRepository creates a new mock instance
func NewMockIDatabaseRepository(ctrl *gomock.Controller) *MockIDatabaseRepository {
	mock := &MockIDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockIDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDatabaseRepository) EXPECT() *MockIDatabaseRepositoryMockRecorder {
	return m.recorder
}

// OpenDatabase mocks base method
func (m *MockIDatabaseRepository) OpenDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OpenDatabase")
}

// OpenDatabase indicates an expected call of OpenDatabase
func (mr *MockIDatabaseRepositoryMockRecorder) OpenDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDatabase", reflect.TypeOf((*MockIDatabaseRepository)(nil).OpenDatabase))
}

// QueryAccount mocks base method
func (m *MockIDatabaseRepository) QueryAccount(accountId string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAccount", accountId)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAccount indicates an expected call of QueryAccount
func (mr *MockIDatabaseRepositoryMockRecorder) QueryAccount(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAccount", reflect.TypeOf((*MockIDatabaseRepository)(nil).QueryAccount), accountId)
}

// SeedDatabase mocks base method
func (m *MockIDatabaseRepository) SeedDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SeedDatabase")
}

// SeedDatabase indicates an expected call of SeedDatabase
func (mr *MockIDatabaseRepositoryMockRecorder) SeedDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedDatabase", reflect.TypeOf((*MockIDatabaseRepository)(nil).SeedDatabase))
}

// CheckConection mocks base method
func (m *MockIDatabaseRepository) CheckConection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConection indicates an expected call of CheckConection
func (mr *MockIDatabaseRepositoryMockRecorder) CheckConection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConection", reflect.TypeOf((*MockIDatabaseRepository)(nil).CheckConection))
}
